ui = cbind(final.ui, final.ui[,12:13])
colnames(ui) <- c('rownames','State_Name','District_Name','Crop','Season','TSI','EPI',
'Premium_rate','Indemnity','Is_MNAIS_Modeled','Is_WBCIS_Modeled',
'State_Is_MNAIS_Modeled','State_Is_WBCIS_Modeled','MNAIS_Check', 'WBCIS_Check')
ui = as.matrix(ui)
ui
ui[ui[,9] == 0,  13] <- 'Crop by District not modelled'
ui[ui[,10] == 0,  14] <- 'Crop by District not modelled'
ui[ui[,11] == 0, 13] <- 'Crop by State not modelled'
ui[ui[,12] == 0, 14] <- 'Crop by State not modelled'
ui
head(final.ui)
ui = cbind(final.ui, final.ui[,12:13])
colnames(ui) <- c('rownames','State_Name','District_Name','Crop','Season','TSI','EPI',
'Premium_rate','Indemnity','Is_MNAIS_Modeled','Is_WBCIS_Modeled',
'State_Is_MNAIS_Modeled','State_Is_WBCIS_Modeled','MNAIS_Check', 'WBCIS_Check')
ui = as.matrix(ui)
# put in flags
ui[ui[,10] == 0,  14] <- 'Crop by District not modelled'
ui[ui[,11] == 0,  15] <- 'Crop by District not modelled'
ui[ui[,12] == 0, 14] <- 'Crop by State not modelled'
ui[ui[,13] == 0, 15] <- 'Crop by State not modelled'
head(ui)
UserInput.db = ui[,c(-10,-11,-12,-13)]
head(UserInput.db)
ui = as.matrix(ui)
# put in flags
ui[ui[,10] == 0,  14] <- 'Crop by District not modelled'
ui[ui[,11] == 0,  15] <- 'Crop by District not modelled'
ui[ui[,12] == 0, 14] <- 'Crop by State not modelled'
ui[ui[,13] == 0, 15] <- 'Crop by State not modelled'
UserInput.db = ui[,c(-10,-11,-12,-13)]
UserInput.db[UserInput.db[,10]  == 1,10] <- 'Good'
UserInput.db[UserInput.db[,11] == 1 ,11] <- 'Good'
UserInput.db
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.3')
UserInput.db = raw_input
rowL            = nrow(UserInput.db)
`%ni%`          <-Negate(`%in%`)
UserInput.db    = as.data.frame(UserInput.db)
UserInput.db[is.na(UserInput.db[,5]),5] <- 0
UserInput.db[is.na(UserInput.db[,6]),6] <- 0
UserInput.db[is.na(UserInput.db[,7]),7] <- 0
options(warn=-1);UserInput.db[is.na(UserInput.db[,2]),2] <- 'All';options(warn=0);
UserInput.db = cbind(rownames(UserInput.db), UserInput.db)
colnames(UserInput.db) <- c('rownumber','State_Name','District_Name','Crop','Season','TSI','EPI','Premium_rate', 'Indemnity')
#...............................................................................
#  a) check if all  State_ID & District_ID are valid.
#  b) Check if all Crop_ID's and Season_ID's are valid.
UserInput_name_mismatch   <- Check_UserInput_Name_Mismatch(UserInput.db,adminID.db,Exposure.db,Product_type.db)
#...............................................................................
#..........................................................................................................
#  c) Check if District_ID's, Crop_ID's and Season_ID's are valid as per the MNAIS Term database.
#  d) Check if all reported entries are modelled crops per district and season (Check with TOM)
Exposure.db    <- Check_UserInput_Prepare_Exposure_db(adminID.db,Exposure.db,Product_type.db)
#..........................................................................................................
#..........................................................................................................
#   Check if districts and states are modelled
#   Check if all reported entries are modelled crops per district and season
UserInput_is_modelled    <- Check_UserInput_modelled_adminlevel(UserInput_name_mismatch, Exposure.db)
#..........................................................................................................
#..........................................................................................................
#  c) Check if [TSI] or [EPI and Premium rate] are provided
#  d) If all 3 (TSI, EPI & Premium rate) are provided, then check if  EPI/ Premium Rate = approximate(TSI) (decide threshold for "approximate". suggested values could be with 0.5% of the difference)
#  e) check if premium rate > 1 or less than 0
#  f) If EPI & TSI are provided check if EPI >= TSI
#  g) Identify entries where TSI is not reported, and compute TSI (FORMULA: EPI / Premium rate = TSI)
UserInput_TSI_check    <- Check_UserInput_TSI_check(UserInput_is_modelled)
#..........................................................................................................
UserInput_TSI_check
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.3')
MNAIS_display_array <- display_array[,-9]
display_array <- MNAIS_display_array
head(display_array)
Data_Audit_Name_Array
Data_Audit_Name_Array <- Data_Audit_Name_Array[,-9]
Data_Audit_Name_Array
Data_Audit_Name_Array <- Data_Audit_Name_Array[,-8]
Data_Audit_Name_Array
State_levels <- lapply(unique(Data_Audit_Name_Array$State_Name), as.character)
Crop_levels  <- lapply(unique(Data_Audit_Name_Array$Crop), as.character)
cropl        = length(Crop_levels)
output_array <- array(, dim=c(length(State_levels),cropl))
State_levels
for(j in 1:length(State_levels))
{
state_id = toString(State_levels[j])
state.db = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,]
for(k in 1:length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,]
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.data.frame(Total_TSI))
}
}
}
state.db
crop_id
state_crop.db <- crop.db[crop.db[,2] == 'All',]
state_crop.db
crop.db == crop.db
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.3')
shiny::runApp()
display_array
shiny::runApp()
display_array
display_array[,-10]
display_array = display_array[,-10]
display_array[,9]
Data_Audit_Name_Array <- display_array[display_array[,9] == 'Good',]
Data_Audit_Name_Array <- Data_Audit_Name_Array[,-8:-9]
State_levels <- lapply(unique(Data_Audit_Name_Array$State_Name), as.character)
Crop_levels  <- lapply(unique(Data_Audit_Name_Array$Crop), as.character)
cropl        = length(Crop_levels)
output_array <- array(, dim=c(length(State_levels),cropl))
for(j in 1:length(State_levels))
{
state_id = toString(State_levels[j])
state.db = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,]
for(k in 1:length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,]
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) == nrow(state_crop.db)))
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.data.frame(Total_TSI))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.data.frame(Total_TSI))
} }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) > nrow(state_crop.db)))
{
x = crop.db[crop.db[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
State_TSI    = sum(as.numeric(state_crop.db[,5]))
Total_TSI    = State_TSI - District_TSI
if(Total_TSI < 0){Total_TSI = 'Error'}
output_array[j,k] <- as.data.frame(Total_TSI)
}
}
}
output_array
colnames(output_array) <- c(Crop_levels)
rownames(output_array) <- c(State_levels)
data_audit_array <- as.data.frame(output_array)
data_audit_array
shiny::runApp()
raw_input
Checked_raw_input
Checked_raw_input <- Check_UserInput(raw_input, adminID.db, Exposure.db, Product_type.db, Check_UserInput_Name_Mismatch,  Check_UserInput_Prepare_Exposure_db, Check_UserInput_modelled_adminlevel, Check_UserInput_TSI_check)
Checked_raw_input
MNAIS_display_array <- display_array[,-10]
MNAISdata_audit_array <<- Perform_Data_Audit(MNAIS_display_array)
display_array <- MNAISdata_audit_array
Data_Audit_Name_Array <- display_array[display_array[,9] == 'Good',]
Data_Audit_Name_Array <- Data_Audit_Name_Array[,-8:-9]
Data_Audit_Name_Array
display_array
display_array <- MNAISdata_audit_array
display_array
MNAIS_display_array <- display_array[,-10]
MNAIS_display_array
shiny::runApp()
shiny::runApp()
MNAIS_display_array
MNAIS_display_array <<- display_array[,-10]
display_array <<- display_array[,-10]
display_array
Data_Audit_Name_Array <- display_array[display_array[,9] == 'Good',]
Data_Audit_Name_Array <- Data_Audit_Name_Array[,-8:-9]
Data_Audit_Name_Array
State_levels <- lapply(unique(Data_Audit_Name_Array$State_Name), as.character)
Crop_levels  <- lapply(unique(Data_Audit_Name_Array$Crop), as.character)
cropl        = length(Crop_levels)
output_array <- array(, dim=c(length(State_levels),cropl))
for(j in 1:length(State_levels))
{
state_id = toString(State_levels[j])
state.db = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,]
for(k in 1:length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,]
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) == nrow(state_crop.db)))
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.data.frame(Total_TSI))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.data.frame(Total_TSI))
}   }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) > nrow(state_crop.db)))
{
x = crop.db[crop.db[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
State_TSI    = sum(as.numeric(state_crop.db[,5]))
Total_TSI    = State_TSI - District_TSI
if(Total_TSI < 0){Total_TSI = 'Error'}
output_array[j,k] <- as.data.frame(Total_TSI)
}
}
}
output_array
shiny::runApp()
colnames(output_array) <- c(Crop_levels)
rownames(output_array) <- c(State_levels)
shiny::runApp()
MNAIS_display_array
MNAISdata_audit_array
MNAISdata_audit_array <<- Perform_Data_Audit(MNAIS_display_array)
output_array = as.matrix(output_array)
shiny::runApp()
shiny::runApp()
MNAISdata_audit_array
class(MNAISdata_audit_array)
as.array(MNAISdata_audit_array)
as.matrix(MNAISdata_audit_array)
shiny::runApp()
WBCISdata_audit_array
shiny::runApp()
WBCISdata_audit_array
MNAISdata_audit_array
LOB_Pie_Plot_1(MNAISdata_audit_array, "MNAIS Line of Business")
class(MNAISdata_audit_array)
as.numeric(MNAISdata_audit_array)
x=MNAISdata_audit_array
y=MNAISdata_audit_array
x[is.na(x)] <- 0
newdata.x = colSums(x)
newdata.x = colSums(as.numeric(as.character(x)))
colSums(as.numeric(as.character(x)))
x
x[is.na(x)] <- 0
newdata.x   = colSums(as.numeric(as.character(x)))
slices.x    <- c(newdata.x)
lbls.x      <- c(names(newdata.x))
pct.x       <- round(slices.x/sum(slices.x)*100)
lbls.x      <- paste(lbls.x, pct.x) # add percents to labels
lbls.x      <- paste(lbls.x,"%",sep="") # ad % to labels
y[is.na(y)] <- 0
newdata.y   = colSums(as.numeric(as.character(y)))
slices.y    <- c(newdata.y)
lbls.y      <- c(names(newdata.y))
pct.y       <- round(slices.y/sum(slices.y)*100)
lbls.y      <- paste(lbls.y, pct.y) # add percents to labels
lbls.y      <- paste(lbls.y,"%",sep="") # ad % to labels
shiny::runApp()
WBCISdata_audit_array
MNAISdata_audit_array
LOB_Pie_Plot_1(MNAISdata_audit_array, "MNAIS Line of Business")
LOB_Pie_Plot_1(WBCISdata_audit_array, "WBCIS Line of Business")
LOB_Pie_Plot(MNAISdata_audit_array,WBCISdata_audit_array)
shiny::runApp()
shiny::runApp()
y_flag
LOB_Pie_Plot_1(MNAISdata_audit_array, "MNAIS Line of Business")
MNAISdata_audit_array
MNAISdata_audit_array <<- as.data.frame(Perform_Data_Audit(MNAIS_display_array))
MNAISdata_audit_array
LOB_Pie_Plot_1(MNAISdata_audit_array, "MNAIS Line of Business")
colSums(MNAISdata_audit_array)
shiny::runApp()
shiny::runApp()
x=(MNAISdata_audit_array)
x
x[is.na(x)] <- 0
if(nrow(x) > 1) {newdata   = colSums(x)}
if(nrow(x) == 1) {newdata   = x}
newdata
slices  <- c(newdata)
slices
lbls    <- c(names(newdata))
pct     <- round(slices/sum(slices)*100)
class(newdata)
if(nrow(x) == 1) {newdata   = as.matrix(x)}
slices  <- c(newdata)
lbls    <- c(names(newdata))
pct     <- round(slices/sum(slices)*100)
slices
slices  <- as.numeric(newdata)
slices
pct     <- round(slices/sum(slices)*100)
if(nrow(x) == 1) {newdata   = (x)}
slices  <- as.numeric(newdata)
lbls    <- c(names(newdata))
pct     <- round(slices/sum(slices)*100)
shiny::runApp()
shiny::runApp()
MNAIS_display_array <- display_array[,-9]
shiny::runApp()
MNAIS_display_array <- display_array[,-9]
WBCIS_display_array <- display_array[,-8]
MNAIS_display_array  = MNAIS_display_array[MNAIS_display_array[,8] == 'Good',]
MNAIS_display_array = Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db)
MNAIS_display_array
display_array
head(display_array)
MNAIS_display_array <- display_array[,-10]
WBCIS_display_array <- display_array[,-9]
MNAIS_display_array  = MNAIS_display_array[MNAIS_display_array[,8] == 'Good',]
MNAIS_display_array
display_array[,-10]
MNAIS_display_array <- display_array[,-10]
head(display_array)
MNAIS_display_array  = MNAIS_display_array[MNAIS_display_array[,9] == 'Good',]
MNAIS_display_array = Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db)
MNAIS_display_array
head(MNAIS_display_array)
MNAIS_display_array <- display_array[,-10]
MNAIS_display_array  = MNAIS_display_array[MNAIS_display_array[,9] == 'Good',]
head(MNAIS_display_array)
class(MNAIS_display_array)
Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db)
Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db)
z=Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db)
fix(z)
display_array=MNAIS_display_array
CropNames  =  as.data.frame(unique(Product_type.db[,c(-1,-5,-6)]))
CropNames
cropdb     <- unique(cbind(as.character(CropNames[,1]),
as.character(CropNames[,2]),
as.numeric(as.character(CropNames[,3]))))
head(cropdb)
colnames(cropdb) <- c('Crop','Season', 'CropSeasonID')
cropmerged       =  merge(display_array, cropdb, by=c('Crop', 'Season'))
# Attach State Names to the Array
StateID.db  =  unique(adminID.db[,c(-1, -3, -5)])
State_DistrictID.db  =  unique(adminID.db[,c(-1)])
dist_not_exists  <- cropmerged[is.na(cropmerged[,4]),]
dist_exists      <- cropmerged[!is.na(cropmerged[,4]),]
dist_exists
head(dist_exists)
head(dist_not_exists)
if(nrow(dist_exists) > 0)     {State_district_crop_merged  =  merge(dist_exists, State_DistrictID.db, by=c('State_Name', 'District_Name'))}
head(dist_exists)
fix(State_district_crop_merged)
State_district_crop_merged = as.matrix(State_district_crop_merged)
head(State_district_crop_merged)
if((nrow(dist_exists) > 0)  && (nrow(dist_not_exists) > 0)) {final = cbind(State_district_crop_merged, State_crop_merged)}
if((nrow(dist_exists) > 0)  && (nrow(dist_not_exists) == 0)){final = State_district_crop_merged}
if((nrow(dist_exists) == 0) && (nrow(dist_not_exists) > 0)) {final = State_crop_merged}
head(dist_exists)
head(final)
#...............................................................................
# Convert all state, district and crop season to ID's
Convert_Par_to_ID <- function(display_array, adminID.db, Product_type.db)
{
#display_array=MNAIS_display_array
# Attach Crop Names to the array
CropNames  =  as.data.frame(unique(Product_type.db[,c(-1,-5,-6)]))
cropdb     <- unique(cbind(as.character(CropNames[,1]),
as.character(CropNames[,2]),
as.numeric(as.character(CropNames[,3]))))
colnames(cropdb) <- c('Crop','Season', 'CropSeasonID')
cropmerged       =  merge(display_array, cropdb, by=c('Crop', 'Season'))
# Attach State Names to the Array
StateID.db  =  unique(adminID.db[,c(-1, -3, -5)])
State_DistrictID.db  =  unique(adminID.db[,c(-1)])
dist_not_exists  <- cropmerged[is.na(cropmerged[,4]),]
dist_exists      <- cropmerged[!is.na(cropmerged[,4]),]
if(nrow(dist_exists) > 0)     {State_district_crop_merged  =  merge(dist_exists, State_DistrictID.db, by=c('State_Name', 'District_Name'))}
if(nrow(dist_not_exists) > 0)
{
State_crop_merged = merge(dist_not_exists, StateID.db, by=c('State_Name'))
State_crop_merged = cbind(State_crop_merged, NA)
}
State_district_crop_merged = as.matrix(State_district_crop_merged)
if((nrow(dist_exists) > 0)  && (nrow(dist_not_exists) > 0)) {final = cbind(State_district_crop_merged, State_crop_merged)}
if((nrow(dist_exists) > 0)  && (nrow(dist_not_exists) == 0)){final = State_district_crop_merged}
if((nrow(dist_exists) == 0) && (nrow(dist_not_exists) > 0)) {final = State_crop_merged}
# create a output array
converted <- cbind(final[,11:12], final[,10], final[,5:8])
colnames(converted) <- c('State_ID','District_ID','CropSeasonID','TSI','EPI','Premium_rate')
#    #...............................................................................
#    # Compute tsi
#    for(i in 1:nrow(converted))
#    {
#      TSI = converted[i,4]; if(!is.na(TSI)){if(TSI == 0){TSI = NA}}
#      EPI = converted[i,5]; if(!is.na(EPI)){if(EPI == 0){EPI = NA}}
#      PR  = converted[i,6]; if(!is.na(PR)) {if(PR == 0) {PR = NA} }
#
#      TSI
#    }
#    #...............................................................................
return(converted)
}
#....
MNAIS_display_array = Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db)
MNAIS_display_array <- display_array[,-10]
MNAIS_display_array  = MNAIS_display_array[MNAIS_display_array[,9] == 'Good',]
MNAIS_display_array
head(MNAIS_display_array)
MNAIS_display_array = Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db)
#...............................................................................
# Convert all state, district and crop season to ID's
Convert_Par_to_ID <- function(display_array, adminID.db, Product_type.db)
{
#display_array=MNAIS_display_array
# Attach Crop Names to the array
CropNames  =  as.data.frame(unique(Product_type.db[,c(-1,-5,-6)]))
cropdb     <- unique(cbind(as.character(CropNames[,1]),
as.character(CropNames[,2]),
as.numeric(as.character(CropNames[,3]))))
colnames(cropdb) <- c('Crop','Season', 'CropSeasonID')
cropmerged       =  merge(display_array, cropdb, by=c('Crop', 'Season'))
# Attach State Names to the Array
StateID.db  =  unique(adminID.db[,c(-1, -3, -5)])
State_DistrictID.db  =  unique(adminID.db[,c(-1)])
dist_not_exists  <- cropmerged[is.na(cropmerged[,4]),]
dist_exists      <- cropmerged[!is.na(cropmerged[,4]),]
if(nrow(dist_exists) > 0)     {State_district_crop_merged  =  merge(dist_exists, State_DistrictID.db, by=c('State_Name', 'District_Name'))}
if(nrow(dist_not_exists) > 0)
{
State_crop_merged = merge(dist_not_exists, StateID.db, by=c('State_Name'))
State_crop_merged = cbind(State_crop_merged, NA)
}
State_district_crop_merged = as.matrix(State_district_crop_merged)
if((nrow(dist_exists) > 0)  && (nrow(dist_not_exists) > 0)) {final = cbind(State_district_crop_merged, State_crop_merged)}
if((nrow(dist_exists) > 0)  && (nrow(dist_not_exists) == 0)){final = State_district_crop_merged}
if((nrow(dist_exists) == 0) && (nrow(dist_not_exists) > 0)) {final = State_crop_merged}
# create a output array
converted <- cbind(final[,11:12], final[,10], final[,5:8])
colnames(converted) <- c('State_ID','District_ID','CropSeasonID','TSI','EPI','Premium_rate','Indemnity')
#    #...............................................................................
#    # Compute tsi
#    for(i in 1:nrow(converted))
#    {
#      TSI = converted[i,4]; if(!is.na(TSI)){if(TSI == 0){TSI = NA}}
#      EPI = converted[i,5]; if(!is.na(EPI)){if(EPI == 0){EPI = NA}}
#      PR  = converted[i,6]; if(!is.na(PR)) {if(PR == 0) {PR = NA} }
#
#      TSI
#    }
#    #...............................................................................
return(converted)
}
#...............................................................................
MNAIS_display_array = Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db)
MNAIS_display_array
head(MNAIS_display_array)
MNAIS_Exposure.db                            <-  get_mutually_exclusive_exposure(MNAIS_display_array, Exposure.db) # get mutually exclusive modelled states
head(as.data.frame(MNAIS_display_array))
head((MNAIS_display_array))
MNAIS_display_array = as.data.frame(Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db))
MNAIS_display_array <- display_array[,-10]
MNAIS_display_array  = MNAIS_display_array[MNAIS_display_array[,9] == 'Good',]
MNAIS_display_array = as.data.frame(Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db))
head(MNAIS_display_array)
db.flag = 0
UI_CropSeasonID     = unique(UserInput.db$CropSeasonID)
UI_StateID          = unique(UserInput.db$State_ID)
UserInput.db <- MNAIS_display_array
db.flag = 0
UI_CropSeasonID     = unique(UserInput.db$CropSeasonID)
UI_StateID          = unique(UserInput.db$State_ID)
for(i in 1:length(UI_CropSeasonID))
{
CS_id       = UI_CropSeasonID[i]
Crop.db     <- Exposure.db[Exposure.db[,3] == CS_id,]
for(j in 1:length(UI_StateID))
{
st_id         = UI_StateID[j]
state_crop.db <- Crop.db[Crop.db[,2] == st_id,]
if(db.flag == 1) {tmp.Exposure.db = rbind(tmp.Exposure.db, state_crop.db)}
if(db.flag == 0) {tmp.Exposure.db = state_crop.db; db.flag = 1}
}
}
UI_CropSeasonID
UI_StateID
UI_CropSeasonID     = unique(as.numeric(as.character(UserInput.db$CropSeasonID)))
UI_StateID          = unique(as.numeric(as.character(UserInput.db$State_ID)))
UI_StateID
UI_CropSeasonID
for(i in 1:length(UI_CropSeasonID))
{
CS_id       = UI_CropSeasonID[i]
Crop.db     <- Exposure.db[Exposure.db[,3] == CS_id,]
for(j in 1:length(UI_StateID))
{
st_id         = UI_StateID[j]
state_crop.db <- Crop.db[Crop.db[,2] == st_id,]
if(db.flag == 1) {tmp.Exposure.db = rbind(tmp.Exposure.db, state_crop.db)}
if(db.flag == 0) {tmp.Exposure.db = state_crop.db; db.flag = 1}
}
}
tmp.Exposure.db
MNAIS_Exposure.db                            <-  get_mutually_exclusive_exposure(MNAIS_display_array, Exposure.db) # get mutually exclusive modelled states
MNAIS_display_array <- display_array[,-10]
MNAIS_display_array  = MNAIS_display_array[MNAIS_display_array[,9] == 'Good',]
MNAIS_display_array = as.data.frame(Convert_Par_to_ID(MNAIS_display_array, adminID.db, Product_type.db))
MNAIS_Exposure.db                            <-  get_mutually_exclusive_exposure(MNAIS_display_array, Exposure.db)
MNAIS_display_array <- UserInput.db
