for(k in 1:length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,,drop=FALSE]
if(nrow(state.deduct) > 0 ){crop.deduct = state.deduct[state.deduct[,3] == crop_id,,drop=FALSE]}
if(nrow(state.deduct) == 0 ){crop.deduct = NULL}
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) == nrow(state_crop.db)))
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}   }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) > nrow(state_crop.db)))
{
x = crop.db[crop.db[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
if(!is.null(crop.deduct)){deduct_tsi = sum(as.numeric(as.character(crop.deduct[,5])))}
if(is.null(crop.deduct)){deduct_tsi = 0}
State_TSI         = sum(as.numeric(as.character(state_crop.db[,5])))
Total_TSI         = State_TSI - deduct_tsi
if(Total_TSI < 0) {Total_TSI = 'Error'}
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
}
}
state_id
state.db
state.deduct
Crop_levels
j
crop_id
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
#...............................................................................
# isolate good user entries
display_array[display_array[,9]=='Indemnity Level entry does not comply, Default will be taken',9] <- 'Good'
display_array[display_array[,9]=='Crop by District not modelled',9] <- 'Deduct'
display_array[display_array[,9]=='District mismatch',9] <- 'Deduct'
deduct <- display_array[display_array[,9] == 'Deduct',]
Data_Audit_Name_Array <- display_array[display_array[,9] == 'Good',]
Data_Audit_Name_Array <- Data_Audit_Name_Array[,-8:-10]
#...............................................................................
State_levels <- unique(as.character(Data_Audit_Name_Array$State_Name))
Crop_levels  <- unique(as.character(Data_Audit_Name_Array$Crop))
cropl        = length(Crop_levels)
output_array <- array(, dim=c(length(State_levels),cropl))
state_id     = toString(State_levels[j])
state.db     = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,,drop=FALSE]
state.deduct = deduct[deduct[,1] == state_id,,drop=FALSE]
{
state_id     = toString(State_levels[j])
state.db     = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,,drop=FALSE]
state.deduct = deduct[deduct[,1] == state_id,,drop=FALSE]
for(k in 1:1)#length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,,drop=FALSE]
if(nrow(state.deduct) > 0 ){crop.deduct = state.deduct[state.deduct[,3] == crop_id,,drop=FALSE]}
if(nrow(state.deduct) == 0 ){crop.deduct = NULL}
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) == nrow(state_crop.db)))
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}   }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) > nrow(state_crop.db)))
{
x = crop.db[crop.db[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
if(!is.null(crop.deduct)){deduct_tsi = sum(as.numeric(as.character(crop.deduct[,5])))}
if(is.null(crop.deduct)){deduct_tsi = 0}
State_TSI         = sum(as.numeric(as.character(state_crop.db[,5])))
Total_TSI         = State_TSI - deduct_tsi
if(Total_TSI < 0) {Total_TSI = 'Error'}
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
}
}
for(j in 1:1)#length(State_levels))
{
state_id     = toString(State_levels[j])
state.db     = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,,drop=FALSE]
state.deduct = deduct[deduct[,1] == state_id,,drop=FALSE]
for(k in 1:1)#length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,,drop=FALSE]
if(nrow(state.deduct) > 0 ){crop.deduct = state.deduct[state.deduct[,3] == crop_id,,drop=FALSE]}
if(nrow(state.deduct) == 0 ){crop.deduct = NULL}
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) == nrow(state_crop.db)))
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}   }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) > nrow(state_crop.db)))
{
x = crop.db[crop.db[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
if(!is.null(crop.deduct)){deduct_tsi = sum(as.numeric(as.character(crop.deduct[,5])))}
if(is.null(crop.deduct)){deduct_tsi = 0}
State_TSI         = sum(as.numeric(as.character(state_crop.db[,5])))
Total_TSI         = State_TSI - deduct_tsi
if(Total_TSI < 0) {Total_TSI = 'Error'}
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
}
}
state_id
state.db
state.deduct
crop.db
crop.deduct
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
state_crop.db
nrow(state_crop.db) > 0
nrow(crop.db) == nrow(state_crop.db)
crop.db
(nrow(state_crop.db) == 0
)
(nrow(state_crop.db) > 0)
(nrow(crop.db) > nrow(state_crop.db))
state_crop.db
crop.db
Data_Audit_Name_Array
state.deduct
(nrow(state_crop.db) > 0) && (nrow(crop.deduct) == nrow(state_crop.db))
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
#...............................................................................
# isolate good user entries
display_array[display_array[,9]=='Indemnity Level entry does not comply, Default will be taken',9] <- 'Good'
display_array[display_array[,9]=='Crop by District not modelled',9] <- 'Deduct'
display_array[display_array[,9]=='District mismatch',9] <- 'Deduct'
deduct <- display_array[display_array[,9] == 'Deduct',]
Data_Audit_Name_Array <- display_array[display_array[,9] == 'Good',]
Data_Audit_Name_Array <- Data_Audit_Name_Array[,-8:-10]
#...............................................................................
deduct
if(nrow(Data_Audit_Name_Array) > 0)
{
#...............................................................................
# Aggregate state by crop
State_levels <- unique(as.character(Data_Audit_Name_Array$State_Name))
Crop_levels  <- unique(as.character(Data_Audit_Name_Array$Crop))
cropl        = length(Crop_levels)
output_array <- array(, dim=c(length(State_levels),cropl))
for(j in 1:1)#length(State_levels))
{
state_id     = toString(State_levels[j])
state.db     = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,,drop=FALSE]
state.deduct = deduct[deduct[,1] == state_id,,drop=FALSE]
for(k in 1:1)#length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,,drop=FALSE]
if(nrow(state.deduct) > 0 ){crop.deduct = state.deduct[state.deduct[,3] == crop_id,,drop=FALSE]}
if(nrow(state.deduct) == 0 ){crop.deduct = NULL}
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.deduct) == nrow(state_crop.db)))
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}   }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.deduct) > nrow(state_crop.db)))
{
x = crop.db[crop.db[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
if(!is.null(crop.deduct)){deduct_tsi = sum(as.numeric(as.character(crop.deduct[,5])))}
if(is.null(crop.deduct)){deduct_tsi = 0}
State_TSI         = sum(as.numeric(as.character(state_crop.db[,5])))
Total_TSI         = State_TSI - deduct_tsi
if(Total_TSI < 0) {Total_TSI = 'Error'}
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
}
}
State_levels
if(nrow(Data_Audit_Name_Array) > 0)
{
#...............................................................................
# Aggregate state by crop
State_levels <- unique(as.character(Data_Audit_Name_Array$State_Name))
Crop_levels  <- unique(as.character(Data_Audit_Name_Array$Crop))
cropl        = length(Crop_levels)
output_array <- array(, dim=c(length(State_levels),cropl))
for(j in 1:1)#length(State_levels))
{
state_id     = toString(State_levels[j])
state.db     = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,,drop=FALSE]
state.deduct = deduct[deduct[,1] == state_id,,drop=FALSE]
for(k in 1:1)#length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,,drop=FALSE]
if(nrow(state.deduct) > 0 ){crop.deduct = state.deduct[state.deduct[,3] == crop_id,,drop=FALSE]}
if(nrow(state.deduct) == 0 ){crop.deduct = NULL}
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.deduct) == nrow(state_crop.db)))
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}   }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.deduct) > nrow(state_crop.db)))
{
x = crop.db[crop.db[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
if(!is.null(crop.deduct)){deduct_tsi = sum(as.numeric(as.character(crop.deduct[,5])))}
if(is.null(crop.deduct)){deduct_tsi = 0}
State_TSI         = sum(as.numeric(as.character(state_crop.db[,5])))
Total_TSI         = State_TSI - deduct_tsi
if(Total_TSI < 0) {Total_TSI = 'Error'}
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
}
}
}
state_id
state.db
state.deduct
crop.db
crop.deduct
state_crop.db
for(j in 1:1)#length(State_levels))
{
state_id     = toString(State_levels[j])
state.db     = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,,drop=FALSE]
state.deduct = deduct[deduct[,1] == state_id,,drop=FALSE]
for(k in 1:1)#length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,,drop=FALSE]
if(nrow(state.deduct) > 0 ){crop.deduct = state.deduct[state.deduct[,3] == crop_id,,drop=FALSE]}
if(nrow(state.deduct) == 0 ){crop.deduct = NULL}
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.deduct) == nrow(state_crop.db)))
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}   }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.deduct) > nrow(state_crop.db)))
{
print('hello')
x = crop.db[crop.db[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
if(!is.null(crop.deduct)){deduct_tsi = sum(as.numeric(as.character(crop.deduct[,5])))}
if(is.null(crop.deduct)){deduct_tsi = 0}
State_TSI         = sum(as.numeric(as.character(state_crop.db[,5])))
Total_TSI         = State_TSI - deduct_tsi
if(Total_TSI < 0) {Total_TSI = 'Error'}
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
}
}
for(j in 1:1)#length(State_levels))
{
state_id     = toString(State_levels[j])
state.db     = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,,drop=FALSE]
state.deduct = deduct[deduct[,1] == state_id,,drop=FALSE]
for(k in 1:1)#length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,,drop=FALSE]
if(nrow(state.deduct) > 0 ){crop.deduct = state.deduct[state.deduct[,3] == crop_id,,drop=FALSE]}
if(nrow(state.deduct) == 0 ){crop.deduct = NULL}
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.deduct) == nrow(state_crop.db)))
{
print('hello222222')
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
print('hello1111')
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}   }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.deduct) > nrow(state_crop.db)))
{
print('hello')
x = crop.db[crop.db[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
if(!is.null(crop.deduct)){deduct_tsi = sum(as.numeric(as.character(crop.deduct[,5])))}
if(is.null(crop.deduct)){deduct_tsi = 0}
State_TSI         = sum(as.numeric(as.character(state_crop.db[,5])))
Total_TSI         = State_TSI - deduct_tsi
if(Total_TSI < 0) {Total_TSI = 'Error'}
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
}
}
x
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
display_array
MNAIS_display_array  <- display_array[,-10]
MNAIS_display_array
display_array <- MNAIS_display_array
display_array
as.data.frame(Perform_Data_Audit(MNAIS_display_array))
#...............................................................................
# isolate good user entries
display_array[display_array[,9]=='Indemnity Level entry does not comply, Default will be taken',9] <- 'Good'
display_array[display_array[,9]=='Crop by District not modelled',9] <- 'Deduct'
display_array[display_array[,9]=='District mismatch',9] <- 'Deduct'
deduct <- display_array[display_array[,9] == 'Deduct',]
Data_Audit_Name_Array <- display_array[display_array[,9] == 'Good',]
Data_Audit_Name_Array <- Data_Audit_Name_Array[,-8:-10]
#...............................................................................
Data_Audit_Name_Array
display_array
fix(display_array)
fix(display_array)
fix(Data_Audit_Name_Array)
fix(Data_Audit_Name_Array)
fix(deduct)
Data_Audit_Name_Array <- rbind(Data_Audit_Name_Array, deduct)
display_array[display_array[,9]=='Indemnity Level entry does not comply, Default will be taken',9] <- 'Good'
display_array[display_array[,9]=='Crop by District not modelled',9] <- 'Deduct'
display_array[display_array[,9]=='District mismatch',9] <- 'Deduct'
deduct <- display_array[display_array[,9] == 'Deduct',]
Data_Audit_Name_Array <- display_array[display_array[,9] == 'Good',]
Data_Audit_Name_Array <- rbind(Data_Audit_Name_Array, deduct)
Data_Audit_Name_Array <- Data_Audit_Name_Array[,-8:-10]
Data_Audit_Name_Array
State_levels <- unique(as.character(Data_Audit_Name_Array$State_Name))
Crop_levels  <- unique(as.character(Data_Audit_Name_Array$Crop))
cropl        = length(Crop_levels)
output_array <- array(, dim=c(length(State_levels),cropl))
State_levels
output_array
cropl
Crop_levels
State_levels
for(j in 1:length(State_levels))
{
state_id     = toString(State_levels[j])
state.db     = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,,drop=FALSE]
state.deduct = deduct[deduct[,1] == state_id,,drop=FALSE]
}
state.deduct
for(j in 1:length(State_levels))
{
state_id     = toString(State_levels[j])
state.db     = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,,drop=FALSE]
state.deduct = deduct[deduct[,1] == state_id,,drop=FALSE]
for(k in 1:length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,,drop=FALSE]
if(nrow(state.deduct) > 0 ){crop.deduct = state.deduct[state.deduct[,3] == crop_id,,drop=FALSE]}
if(nrow(state.deduct) == 0 ){crop.deduct = NULL}
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.deduct) == nrow(state_crop.db)))
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}   }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.deduct) > nrow(state_crop.db)))
{
x = crop.deduct[crop.deduct[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
if(!is.null(crop.deduct)){deduct_tsi = sum(as.numeric(as.character(crop.deduct[,5])))}
if(is.null(crop.deduct)){deduct_tsi = 0}
State_TSI         = sum(as.numeric(as.character(state_crop.db[,5])))
Total_TSI         = State_TSI - deduct_tsi
if(Total_TSI < 0) {Total_TSI = 'Error'}
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
}
}
for(j in 1:length(State_levels))
{
state_id     = toString(State_levels[j])
state.db     = Data_Audit_Name_Array[Data_Audit_Name_Array[,1] == state_id,,drop=FALSE]
state.deduct = deduct[deduct[,1] == state_id,,drop=FALSE]
for(k in 1:length(Crop_levels))
{
crop_id = toString(Crop_levels[k])
crop.db = state.db[state.db[,3] == crop_id,,drop=FALSE]
if(nrow(state.deduct) > 0 ){crop.deduct = state.deduct[state.deduct[,3] == crop_id,,drop=FALSE]}
if(nrow(state.deduct) == 0 ){crop.deduct = NULL}
state_crop.db <- crop.db[crop.db[,2] == 'All',,drop=FALSE] #see if the entry is reported at state level
#for entries reported at state level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) == nrow(state_crop.db)))
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
#for entries only reported at district level only
if(nrow(state_crop.db) == 0)
{
if(nrow(crop.db) > 0)
{
Total_TSI = as.numeric(crop.db[,5])
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}   }
#for entries only reported at State and district level only
if((nrow(state_crop.db) > 0) && (nrow(crop.db) > nrow(state_crop.db)))
{
x = crop.deduct[crop.deduct[,2] != 'All',]
District_TSI = sum(as.numeric(x[,5]))
if(!is.null(crop.deduct)){deduct_tsi = sum(as.numeric(as.character(crop.deduct[,5])))}
if(is.null(crop.deduct)){deduct_tsi = 0}
State_TSI         = sum(as.numeric(as.character(state_crop.db[,5])))
Total_TSI         = State_TSI - deduct_tsi
if(Total_TSI < 0) {Total_TSI = 'Error'}
output_array[j,k] <- sum(as.numeric(as.character(Total_TSI)))
}
}
}
output_array
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
WBCIS.final
head(WBCIS.final)
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
write.csv(adminID.db, "master_admin.csv")
getwd()
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
head(Exposure.db)
write.csv(Exposure.db, "Exposure_db.csv")
write.csv(adminID.db, "master_admin.csv")
write.csv(Product_type.db, "Product_type.csv")
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
source('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6/data/Convert_Data_RDS.R')
source('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6/data/Convert_Data_RDS.R')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
shiny::runApp('C:/Nirav/IARP/Beta_Model_BI_V2/Beta_Model_BI_V1.6')
